/*Package api contains base API implementation of unified alerting
 *
 *Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 *
 *Do not manually edit these files, please find ngalert/api/swagger-codegen/ for commands on how to generate them.
 */
package api

import (
	"net/http"

	"github.com/grafana/grafana/pkg/api/response"
	"github.com/grafana/grafana/pkg/api/routing"
	"github.com/grafana/grafana/pkg/middleware"
	"github.com/grafana/grafana/pkg/models"
	"github.com/grafana/grafana/pkg/services/ngalert/metrics"
)

type HistoryApi interface {
	RouteGetRuleStateHistory(*models.ReqContext) response.Response
	RouteGetStateHistory(*models.ReqContext) response.Response
}

func (f *HistoryApiHandler) RouteGetRuleStateHistory(ctx *models.ReqContext) response.Response {
	return f.handleRouteGetRuleStateHistory(ctx)
}
func (f *HistoryApiHandler) RouteGetStateHistory(ctx *models.ReqContext) response.Response {
	return f.handleRouteGetStateHistory(ctx)
}

func (api *API) RegisterHistoryApiEndpoints(srv HistoryApi, m *metrics.API) {
	api.RouteRegister.Group("", func(group routing.RouteRegister) {
		group.Get(
			toMacaronPath("/api/ruler/grafana/states/{RuleUID}"),
			api.authorize(http.MethodGet, "/api/ruler/grafana/states/{RuleUID}"),
			metrics.Instrument(
				http.MethodGet,
				"/api/ruler/grafana/states/{RuleUID}",
				srv.RouteGetRuleStateHistory,
				m,
			),
		)
		group.Get(
			toMacaronPath("/api/ruler/grafana/states"),
			api.authorize(http.MethodGet, "/api/ruler/grafana/states"),
			metrics.Instrument(
				http.MethodGet,
				"/api/ruler/grafana/states",
				srv.RouteGetStateHistory,
				m,
			),
		)
	}, middleware.ReqSignedIn)
}
